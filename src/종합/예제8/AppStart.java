package 종합.예제8;

import 종합.예제8.view.BoardView;

public class AppStart {
    public static void main(String[] args) {

        // 프로젝트 기획

        // 패키지 생성 / 패키지 별로 클래스 생성

        // 프로토타입 만들기
            // 어떤식으로 화면을 출력할 것인지 구상

        // 데이터 모델 만들기
            // 연동할 객체마다 타입을 명시하고 연동할 객체끼리 구분 가능하도록 샘플 구상

        // *API 명세서* 만들기 (프론트 와 백의 통신 방법 정의 )
            // 설계한 데이터 모델을 기반으로 어떤 함수를 어떻게 만들건지 구상
            // 무엇을 주고 받을지 명확하게 구상!!!!!!!!
            // 멤버변수 , 매개변수 , 메소드명 , 배열 or ArrayList , 반환값 있는지 없는지 등
            // 협업을 한다면 모두 확인하고 명시해놓고 시작하는 게 제일제일 중요!!
            // 함수명 , 매개변수명 , 모든 것들 일치 시켜야 주고받을 때 당연지사 편함 , 편한게 아니라 안그러면 못씀
            // 규칙과 방법들을 같이 정의해야 주고받으면서 쓸 수 있음. 당연한거임

        // 싱글톤 생성

        // 가져와야할 싱글톤 가져오기
            // view 에서 controller 싱글톤 필요
            // controller 에서 dao 싱글톤 필요
            // 싱글톤 가져와서 변수로 지정해놓으면 써야하는 메소드에서 편하게 쓸 수 있음
            // 대문자는 class , 소문자는 변수명으로 구분하면 좀 편할거임

        // 데이터 모델 참고하여 테이블 당 DTO(이동객체) 1개 생성 후 멤버변수 구성
            // 기본 생성자 , 매개변수 전체 생성자 , getter and setter , toString() 네개 기본 구성
            // Dao 에 여러개 dto 저장하는 리스트 선언. (추후에는 DB 쓰기 때문에 생략!!)

        // 등록 기능 구현
            // DAO
            // CONTROLLER
                // ---------> dao랑 controller에 기능 구현하고 view 없는데 잘 돌아가는지 어떻게 확인하지?
                // --------> api  테스터기 돌려서 문제 없으면 끝
            // ---> 나눠서 개발해야함
            // VIEW

        // 전체 조회 기능 구현 (dao부터 하는게 일반적임 , 수업에서는 일부러 차이점 보이려고 거꾸로 하는중 )
            // VIEW
                // view 메소드 먼저 작성시 controller 메소드가 없으므로 오류남.
            // CONTROLLER
                // 여기서도 거꾸로 하면 메소드 없어서 오류남
            // DAO

        // 화면 연동
            // [공통] view 클래스에 최초 출력 화면 구현
            // [공통] 프로그램 실행



        BoardView.getInstance().index();
        // 프로그램 최초 출력 화면 메소드 호출
        // 호출하고 연동하는 방법은 많지만 , 싱글톤으로 가져오자
        // 이건 이미 싱글톤으로 만들어 놓았음. 가져오기만 하면됨.

    } // main e
} // class e
